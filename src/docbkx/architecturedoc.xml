<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>RADeS Projekt</title>

    <subtitle>Architekturdokumentation</subtitle>

    <releaseinfo>Release Version</releaseinfo>

    <author>
      <orgname>Free Software Foundation Europe</orgname>
    </author>

    <pubdate>\today</pubdate>
  </info>

  <chapter>
    <title>Einführung und Ziele</title>

    <section>
      <title>Aufgabenstellung</title>

      <section>
        <title>Bestandsaufnahme</title>

        <para>Bei der Entwicklung mehrschichtiger oder verteilter Systeme
        führen aktuell auch kleine Anpassungen bereits zu hohen
        Wartungsaufwänden. Das Hinzufügen eines Eingabefeldes beispielsweise
        erfordert Änderungen in jeder Schicht bzw. Anpassungen am Server wie
        auch am Clientprogramm. Dabei unterscheiden sich die anfallenden
        Tätigkeiten beim Hinzufügen von Eingabefelder gleichen Types etwa Name
        und Vorname kaum von einander. Wohl aber muss in jeder Schicht eine
        andere Anpassung vorgenommen werden.</para>

        <para>Zur Bewahrung der Wartbarkeit werden hohe Anforderungen an die
        Kodequalität und damit an Programmierstil und Arbeitsweisen der
        Entwickler gestellt.</para>
      </section>
    </section>

    <section>
      <title>Produktbeschreibung</title>

      <para><figure>
          <title>RADeS Produktkarton</title>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="2in"
                         fileref="images/RADeSProduktkarton.png"/>
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section>
      <title>Qualitätsziele</title>

      <section>
        <title>Änderbarkeit</title>

        <para>RADeS ist als Entwicklerwerkzeug in einem schnellebigen Markt
        platziert. Es ist davon auszugehen, dass das Produkt ständigen
        Anpassungen an sich änderende Technologien und Organisationsformen
        unterworfen ist. Daher muss RADeS sehr leicht und ohne Erzeugung
        größerer Aufwände anpassbar sein.</para>

        <para>Wesentlich wichtiger noch ist jedoch die Änderbarkeit der von
        RADeS erstellten Programme. Diese sollten generell modular und
        technologieneutral aufgebaut sein. So sollte der Austausch der
        Persistenztechnologie per Option wählbar sein. </para>
      </section>

      <section>
        <title>Verfügbarkeit</title>

        <para>RADeS selbst ist ein Entwicklerwerkzeug und muss als solches
        keinen Hochverfügbarkeitsansprüchen genügen. Wenn das Werkzeug
        ausfällt, kann es problemlos neu gestartet werden. Ein Ausfall führt
        zwar zum Verlust von Arbeitszeit jedoch nicht von kritischen Resourcen
        oder extrem negativer Aussenwirkung wie beispielsweise beim Ausfall
        eines Onlinemarktes. </para>

        <para>Programme welche mit RADeS erstellt werden, sollten jedoch auch
        Hochverfügbarkeitsansprüchen da mehrschichtige Anwendungen vor allem
        im Enterprise Umfeld eingesetzt werden. </para>
      </section>

      <section>
        <title>Performance</title>

        <para>RADeS ist als Desktopanwendung zu sehen und muss nicht tausende
        von Anfragen pro Zeiteinheit abarbeiten. Daher ist das Produkt auch
        nicht im Highperformance Sektor einzuordnen. Eine niedere Performance
        ist soweit akzeptabel wie die Benutzbarkeit des Produktes nicht
        darunter leidet. Wartezeiten im Nutzerdialog sind so gering wie
        möglich zu halten. Wartezeiten bei Prozessen wie Generierung,
        Compilierung oder Deployment sollten in für Desktopwerkzeuge üblichen
        Größenordnungen oder darunter liegen.</para>
      </section>
    </section>

    <section>
      <title>Anforderungen</title>

      <para>Eine Kurzfassung der architekturrelevanten Anforderungen (insb.
      die nichtfunktionalen)</para>
    </section>

    <section>
      <title>Stakeholder</title>

      <para>Der wichtigste Stakeholder für das Projekt bin ich selbst. Es soll
      vor allem meine Anforderungen erfüllen.</para>

      <para>Weitere wichtige Stakeholder sind alle Open Source Entwickler
      weltweit, welche in den Bereichen Domain Driven Development oder Model
      Driven Development arbeiten bzw. Java Entwickler die das System nutzen
      wollen um schneller von der Anforderung zum Kode zu kommen.</para>

      <para>Möglicherweise interessieren sich auch Firmen für das
      Projekt.</para>
    </section>
  </chapter>

  <chapter>
    <title>Randbedingungen</title>

    <section>
      <title>Technische Randbedingungen</title>

      <para>Maven is a build automation tool typically used for Java projects.
      Maven serves a similar purpose to the Apache Ant tool, but it is based
      on different concepts and works in a profoundly different manner. It can
      also be used to build and manage projects written in C#, Ruby, Scala,
      and other languages. Maven is hosted by the Apache Software Foundation,
      where it was formerly part of the Jakarta Project.</para>

      <para>Maven uses an XML file to describe the software project being
      built, its dependencies on other external modules and components, the
      build order, directories, and required plug-ins. It comes with
      pre-defined targets for performing certain well-defined tasks such as
      compilation of code and its packaging.</para>

      <para>Maven dynamically downloads Java libraries and Maven plug-ins from
      one or more repositories such as the Maven 2 Central Repository. This
      local cache of downloaded artifacts can also be updated with artifacts
      created by local projects. Public repositories can also be
      updated.</para>

      <para>Maven is built using a plugin-based architecture that allows it to
      make use of any application controllable through standard input.
      Theoretically, this would allow anyone to write plugins to interface
      with build tools (compilers, unit test tools, etc.) for any other
      language. In reality, support and use for languages other than Java has
      been minimal. Currently a plugin for the .NET framework exists and is
      maintained, and a C/C++ native plugin is maintained for Maven 2
      maven-native and maven-nar.</para>
    </section>

    <section>
      <title>Organisatorische Randbedingungen</title>

      <para>Maven projects are configured using a Project Object Model, which
      is stored in a <filename>pom.xml</filename> -file. Here's a minimal
      example:</para>

      <example>
        <title>Maven Example</title>

        <programlisting language="xml">&lt;project&gt;
					&lt;!-- model
					version is always 4.0.0 for Maven 2.x POMs --&gt;
					&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

					&lt;!-- project
					coordinates, i.e. a group of values which
					uniquely identify this
					project --&gt;
					&lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
					&lt;artifactId&gt;my-app&lt;/artifactId&gt;
					&lt;version&gt;1.0&lt;/version&gt;

					&lt;!-- library dependencies
					--&gt;
					&lt;dependencies&gt;
					&lt;dependency&gt;

					&lt;!-- coordinates of
					the required library --&gt;
					&lt;groupId&gt;junit&lt;/groupId&gt;
					&lt;artifactId&gt;junit&lt;/artifactId&gt;
					&lt;version&gt;3.8.1&lt;/version&gt;

					&lt;!--this dependency is only
					used for running and compiling tests--&gt;
					&lt;scope&gt;test&lt;/scope&gt;

					&lt;/dependency&gt;
					&lt;/dependencies&gt;
					&lt;/project&gt;</programlisting>
      </example>

      <para>This POM only defines a unique identifier for the project (
      <emphasis>coordinates</emphasis> ) and its dependency on the JUnit
      framework. However, that is already enough for building the project and
      running the unit tests associated with the project. Maven accomplishes
      this by embracing the idea of Convention over Configuration, that is,
      Maven provides default values for the project's configuration. The
      directory structure of a normal idiomatic Maven project has the
      following directory entries:</para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="*"/>

          <colspec colwidth="*"/>

          <tbody>
            <row>
              <entry>Directory name</entry>

              <entry>Purpose</entry>
            </row>

            <row>
              <entry>project home</entry>

              <entry>Contains the pom.xml and all subdirectories.</entry>
            </row>

            <row>
              <entry>src/main/java</entry>

              <entry>Contains the deliverable Java sourcecode for the
              project.</entry>
            </row>

            <row>
              <entry>src/main/resources</entry>

              <entry>Contains the deliverable resources for the project, such
              as property files.</entry>
            </row>

            <row>
              <entry>src/test/java</entry>

              <entry>Contains the testing classes (JUnit or TestNG test cases,
              for example) for the project.</entry>
            </row>

            <row>
              <entry>src/test/resources</entry>

              <entry>Contains resources necessary for testing.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Then the command</para>

      <programlisting>mvn package</programlisting>

      <para>will compile all the Java files, run any tests, and package the
      deliverable code and resources into
      <filename>target/my-app-1.0.jar</filename> (assuming the artifactId is
      my-app and the version is 1.0.) Using Maven itself, the user provides
      only configuration for the project, while the configurable plug-ins do
      the actual work of compiling the project, cleaning target directories,
      running unit tests, generating API documentation and so on. In general,
      users should not have to write plugins themselves. Contrast this with
      Ant and make in which one writes imperative procedures for doing the
      aforementioned tasks.</para>
    </section>

    <section>
      <title>Konventionen</title>

      <para/>
    </section>
  </chapter>

  <chapter>
    <title>Kontextabgrenzung</title>

    <para/>

    <section>
      <title>Fachlicher Kontext</title>

      <para/>
    </section>

    <section>
      <title>Verteilungskontext</title>

      <para/>
    </section>
  </chapter>

  <chapter>
    <title>Lösungsstrategie</title>

    <para/>
  </chapter>

  <chapter>
    <title>Bausteinsicht</title>

    <para/>
  </chapter>

  <chapter>
    <title>Laufzeitsicht</title>

    <para/>
  </chapter>

  <chapter>
    <title>Verteilungssicht</title>

    <para/>
  </chapter>

  <chapter>
    <title>Übergreifende Konzepte</title>

    <para/>
  </chapter>

  <chapter>
    <title>Architekturentscheidungen</title>

    <para/>
  </chapter>

  <chapter>
    <title>Qualitätsszenarien</title>

    <para/>
  </chapter>

  <chapter>
    <title>Risiken</title>

    <para/>
  </chapter>

  <chapter>
    <title>Glossar</title>

    <para/>
  </chapter>

  <bibliography>
    <title>Referenzen</title>

    <bibliomixed><abbrev>DocBook Wikipedia 2012</abbrev> <title>Wikipedia
    Artikel zu DocBook http://en.wikipedia.org/wiki/DocBook
    </title></bibliomixed>

    <bibliomixed><abbrev>Apache Maven Wikipedia 2012</abbrev> <title>Wikipedia
    Artikel zu Apache Maven http://en.wikipedia.org/wiki/Apache_maven
    </title></bibliomixed>

    <bibliomixed><abbrev>DocBook 5: The Definitive Guide 2012</abbrev>
    <title>HTML-Version (1.0.1) des Buchs von Norman Walsh
    http://www.docbook.org/tdg5/ </title></bibliomixed>

    <bibliomixed><abbrev>DocBook XSL: The Complete Guide 2007</abbrev>
    <title>DocBook 5 Guide von Bob Stayton
    http://www.sagehill.net/docbookxsl/index.html </title></bibliomixed>

    <bibliomixed><abbrev>DocBook XSL Stylesheets: Reference Documentation
    </abbrev> <title>Parameter Reference von Norman Walsh
    http://docbook.xml-doc.org/snapshots/xsl/doc/index.html
    </title></bibliomixed>

    <bibliomixed><abbrev>Docbkx-Tool 2012</abbrev> <title>DocBook Maven Plugin
    http://docbkx-tools.sourceforge.net/ </title></bibliomixed>

    <bibliomixed><abbrev>Docbkx User Guide 2012</abbrev>
    <title>Beispielkonfigurationen für das Maven Docbkx Plugin
    http://docbkx-tools.sourceforge.net/docbkx-samples/manual.html
    </title></bibliomixed>

    <bibliomixed><abbrev>FOP Pdf-Images 2010</abbrev> <title>Erweiterung für
    Apache FOP um PDF-Images
    http://www.jeremias-maerki.ch/download/fop/pdf-images/
    </title></bibliomixed>

    <bibliomixed><abbrev>POM Reference 2012</abbrev> <title>Konfiguration
    einer Maven pom-Datei http://maven.apache.org/pom.html
    </title></bibliomixed>

    <bibliomixed><abbrev>Processing XML with Java 2002</abbrev>
    <title>Beschreibung von Elliotte Rusty Harold wie man XSLT um Java
    erweitert http://cafeconleche.org/books/xmljava/chapters/ch17s03.html
    </title></bibliomixed>

    <bibliomixed><abbrev>EXSLT 2006</abbrev> <title>Erweiterung von XSLT um
    neue Funktionen http://www.exslt.org/ </title></bibliomixed>

    <bibliomixed><abbrev>XML Bible 2001</abbrev> <title>Fünf Beispielkapitel
    aus der XML Bibel von Elliotte Rusty Harold
    http://www.cafeconleche.org/books/bible2/chapters/ </title></bibliomixed>

    <bibliomixed><abbrev>DocBook FAQ</abbrev> <title>Häufig gestellte Fragen
    zu DocBook http://www.dpawson.co.uk/docbook/ </title></bibliomixed>

    <bibliomixed><abbrev>XSL FAQ</abbrev> <title>Häufig gestellte Fragen zu
    XSL http://www.dpawson.co.uk/xsl/index.html </title></bibliomixed>

    <bibliomixed><abbrev>Maven Docbook for beginners 2010</abbrev>
    <title>Quick Start für Docbook mit Maven
    http://www.vineetmanohar.com/2010/02/maven-docbook-for-beginners/
    </title></bibliomixed>

    <bibliomixed><abbrev>XMLmind XML Editor 2012</abbrev> <title>Editor für
    Docbook-Dokumente http://www.xmlmind.com/xmleditor/ </title></bibliomixed>

    <bibliomixed><abbrev>XSL-FO Tutorial 2012</abbrev> <title>XSL-FO Tutorial
    mit Anwendungsbeispielen http://www.data2type.de/xml-xslt-xslfo/xsl-fo
    </title></bibliomixed>

    <bibliomixed><abbrev>XSL-FO Tutorial 2007</abbrev> <title>XSL-FO Tutorial
    als PDF http://www.ecrion.com/Support/PDF/XSL-FOTutorial.pdf
    </title></bibliomixed>

    <bibliomixed><abbrev>DocBook Wiki 2012</abbrev> <title>Wiki von
    NormanWalsh über DocBook http://wiki.docbook.org/Home
    </title></bibliomixed>

    <bibliomixed><abbrev>Using DocBook XSL Stylesheets 2003</abbrev>
    <title>Anleitung für DocBook XSL Stylesheets von Robert Stayton
    http://xml.web.cern.ch/XML/www.sagehill.net/xml/docbookxsl/index.html
    </title></bibliomixed>
  </bibliography>
</book>
